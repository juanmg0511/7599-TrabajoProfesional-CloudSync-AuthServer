# CloudSync - Auth Server
# Flask + MongoDB - on Gunicorn
# docker-compose.yml

# Configuracion de MailHog basada en:
# https://mailtrap.io/blog/mailhog-explained

version: '3'
services:

  flask:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth-server-flask
    restart: unless-stopped
    environment:
      # GUNICORN_LOG_LEVEL - The granularity of log output
      # A string of "debug", "info", "warning", "error", "critical"
      GUNICORN_LOG_LEVEL: "debug"
      # Setear la cantidad de workers a utilizar por Gunicorn
      # https://devcenter.heroku.com/articles/python-gunicorn
      GUNICORN_WORKERS: 4
      # Setear en True or False, solo aplica para correr desde Python (o sea nunca)
      APP_DEBUG: "True"
      APP_PORT: 8000
      # Setear el entorno en que corre el server
      # Puede ser "DEV", "QA", "PROD"
      APP_ENV: "DEV"
      # Setear la API KEY para el app server
      APP_SERVER_API_KEY: "ef00a570-7cfc-4638-8cad-d085fd98b6e3"
      # Setear la duracion de la sesion de usuarios, en minutos
      SESSION_LENGTH_USER_MINUTES: 120
      # Setear la duracion de la sesion de admins, en minutos
      SESSION_LENGTH_ADMIN_MINUTES: 10
      # Setear la duracion de los token de recuperacion de password, en minutos
      RECOVERY_LENGTH_MINUTES: 7200
      # Setear el intervalo de limpieza de sessions, en segundos
      PRUNE_INTERVAL_SESSIONS_SECONDS: 60
      # Setear el intervalo de limpieza de recovery, en segundos
      PRUNE_INTERVAL_RECOVERY_SECONDS: 120
      # Configuracion de correo
      SENDMAIL_ACTIVE: "1"
      SENDMAIL_SERVER: "auth-server-mailhog"
      SENDMAIL_FROM: "do-not-reply@cloudsync.com"
      SENDMAIL_PORT: 1025
      SENDMAIL_USERNAME: "*"
      SENDMAIL_PASSWORD: "*"
      SENDMAIL_USE_TLS: "0"
      SENDMAIL_USE_SSL: "0"
      SENDMAIL_BASE_URL: "http://127.0.0.1"
      # Longitud maxima para nombres de usuarios
      USERNAME_MAX_LENGTH: 25
      # Dimensiones para las imagenes de avatar
      # Ancho, en pixeles
      AVATAR_MAX_WIDTH: 256
      # Ancho, en pixeles
      AVATAR_MAX_HEIGHT: 256
      # Tamanio, en bytes
      AVATAR_MAX_SIZE: 524288
      #Configuracion para Google login
      GOOGLE_CLIENT_ID: "*"
      # Datos para conectarse a la DB
      MONGODB_DATABASE: "auth-server-db"
      MONGODB_USERNAME: "authserveruser"
      MONGODB_PASSWORD: "123456"
      MONGODB_HOSTNAME: "auth-server-mongodb:27017"
      MONGODB_SSL: "false"
      MONGODB_REPLICA_SET: "None"
      MONGODB_AUTH_SOURCE: "None"
      # Secret para los token JWT
      JWT_SECRET: "MINSjxVsRZ6QErNX74wBIUBmm62ExN5"

    volumes:
       - authserverlogs:/home/appuser/logs
       - ".:/home/appuser/" 
    ports:
       - "81:8000"
    depends_on:
      - mongodb
    networks:
      - auth-frontend
      - auth-backend

  mongodb:
    image: mongo:5.0.9
    container_name: auth-server-mongodb
    restart: unless-stopped
    command: mongod --auth
    environment:
      MONGO_INITDB_ROOT_USERNAME: sa
      MONGO_INITDB_ROOT_PASSWORD: 123456
      MONGO_NON_ROOT_USERNAME: authserveruser
      MONGO_NON_ROOT_PASSWORD: 123456
      MONGODB_DATABASE: auth-server-db
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - mongodbdata:/data/db
      # Si el volumen de arriba no existe, corremos el script mongoinit.sh para agregar el usuario
      # de aplicacion e inicializar la base de datos
      - "./mongoinit/:/docker-entrypoint-initdb.d/"
    # Exponemos el puerto para administrar la DB directamente, durante el desarrollo
    # ports:
       # - "27017:27017"
    networks:
      - auth-backend

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: auth-server-mailhog
    restart: unless-stopped
    ports:
      - 8025:8025
    networks:
      - auth-frontend
      - auth-backend

networks:
  auth-frontend:
    driver: bridge
  auth-backend:
    driver: bridge

volumes:
  authserverlogs:
    driver: local
  mongodbdata:
    driver: local
